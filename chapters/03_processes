-------------------------------------------------
CHAPTER 3 - PROCESSES
-------------------------------------------------

- Processes

    A process (or job) is a program in execution.  It contains:
      - The program code (the 'text section')
      - The current state (PC and contents of CPU registers)
      - The process stack (temporary data such as function parameters, 
                             return addresses, and local variables)
      - The data section (global variables)
      - The process heap (if applicable)


- Process States

    New         = The process is being created.
    Running     = Instructions are being executed.
    Waiting     = The process is waiting for some event to occur (such as I/O).
    Ready       = The process is waiting to be assigned to a processor.
    Terminated  = The process has finished execution.


- Process Control Block

    PCB Contains
      - Process State
      - Process Number
      - Program Counter
      - Registers
      - CPU Scheduling Information (Priority, Pointers to queues, etc)
      - Memory Management Information (Base and Limit Registers, Page Tables, etc)
      - Accounting Information (Time Limits, etc)
      - IO Status Information (List of open files, list of devices, etc)


- Process Scheduling

    - As processes enter the system, they are put into the 'job queue' of all 
        processes in the system.

    - The processes that are residing in main memory and are ready and waiting 
        to execute are kept on a list called the 'ready queue'.  An IO-request queue
        is also residing in memory.  All queues are implemented as linked lists of PCBs.

    - Long term scheduler  = Select processes from job queue and loads them into memory
    - Short term scheduler = Selects processes to execute

    - Degree of Multiprogramming = number of processes in memory

    - IO-Bound Process    = generates a lot of IO requests
      CPU-Bound Process   = generates few IO requests

      The goal of the long-term scheduler is to select a good mix of IO-Bound and 
        CPU-Bound processes.

    - Context Switch = switch from one executing PCB to another (context of executing
                        process is saved in PCB and context of new process is loaded
                        from its PCB)


- Linux Processes

    The PCB in Linux is represented by the structure 'task_struct'.  It contains
      the state of the process, scheduling and memory management information,
      a list of open files, and pointers to the process's parent and children.

      /* Some fields of the task_struct */
      pid_t pid;                     /* process identifier */
      long state;                    /* state of the process */
      unsigned int time_slice;       /* scheduling information */
      struct files_struct *files;    /* list of open files */
      struct mm_struct *mm;          /* address space of this process */

      // Command to get complete process information
      ps -el


- Process Creation

    When a process creates a new process, 2 possibilities exist in terms of 
      execution:

      1. The parent continues to execute concurrently with its children.
      2. The parent waits until some or all of its children have terminated.

    There are also 2 possibilities in terms of address space of the new process:

      1. The child process is a duplicate of the parent process (has the same
           program and data as the parent)
      2. The child process has a new program loaded into it.


    - A new process is created by the fork() system call.  The process consists of
        a copy of the address space of the original process.  Both processes
        continue after the fork(), but the fork() returns 0 to the child
        process and the pid of the child to the parent.

    - Then, the exec() call is used to replace the parent's memory space with
        a new program.


- Example - Creating a new process

    #include <sys/types.h>
    #include <stdio.h>
    #include <unistd.h>

    int main() {
        pid_t pid;

        /* Fork a child process */
        pid = fork();

        if (pid < 0) {
            /* An error occurred */
            fprintf(stderr, "Fork failed");
            exit(-1);
        } else if (pid == 0) {
            /* Child process */
            execlp("/bin/ls", "ls", NULL);
        } else {
            /* Parent process will wait for child to complete */
            wait(NULL);
            printf("Child complete");
            exit(0);
        }
    }


- The Producer/Consumer Problem

    - A 'producer' produces information that is consumed by a 'consumer' 
        process.  We can think of a producer as a server and a consumer as
        a client.

    - One solution to the problem uses shared memory.  We have a buffer that
        will reside in shared memory.  Producers will add items, and consumers
        will remove them.

      Two types of buffers can be used:
        1. Unbounded buffer = no limit on size
        2. Bounded buffer   = fixed buffer size


- Buffer Implementation

    #define BUFFER_SIZE 10

    typedef struct {
        ...
    }item;

    item buffer[BUFFER_SIZE];
    int in = 0;       /* Next free position in the buffer */
    int out = 0;      /* First full position in the buffer */


- Producer Process

    item nextProduced;

    while (true) {
        /* Produce nextProduced */
        while ((in + 1) % BUFFER_SIZE == out) ;  /* Wait until spot opens */
        buffer[in] = nextProduced;
        in = (in + 1) % BUFFER_SIZE;
    }


- Consumer Process

    item nextConsumed;

    while(true) {
        while(in == out) ;   /* Wait for item */
        nextConsumed = buffer[out];
        out = (out + 1) % BUFFER_SIZE;
        /* Consume nextConsumed */
    }


- Message-Passing Systems

    Message passing provides a mechanism to allow processes to communicate
      and synchronize their actions without sharing an address space.
      This makes them useful in distributed environments.

    /* Direct communication, sender and receiver must know each other's identities */
    send(P, message)
    receive(Q, message)

    /* Direct communication, receiver can receive from any process
    send(P, message)
    receive(id, message)

    /* Indirect communication with mailbox A */
    send(A, message)
    receive(A, message)


- Message Passing Synchronization

    Blocking Send       = Sender is blocked until message is received
    Nonblocking Send    = Sender sends message, then resumes operation

    Blocking Recieve    = Receiver is blocked until message is available
    Nonblocking Receive = Receiver either retrieves valid message or NULL


- Example - POSIX Shared Memory

    #include <stdio.h>
    #include <sys/shm.h>
    #include <sys/stat.h>

    int main() {
        /* The identifier for the shared memory segment */
        int segment_id;

        /* A pointer to the shared memory segment */
        char* shared_memory;

        /* The size (in bytes) of the memory segment */
        const int size = 4096;

        /* Allocate a shared memory segment */
        segment_id = shmget(IPC_PRIVATE, size, I_IRUSR | I_IWUSR);

        /* Attach the shared memory segment */
        shared_memory = (char *) shmat(segment_id, NULL, 0);

        /* Write a message to the shared memory segment */
        sprintf(shared_memory, "Hi there!");

        /* Now, print out the string from shared memory */
        printf("*%s\n", shared_memory);

        /* Detach the shared memory segment */
        shmdt(shared_memory);

        /* Remove the shared memory segment */
        shmctl(segment_id, IPC_RMID, NULL);
    }


- Example - Java Sockets

    import java.net.*;
    import java.io.*;

    public class DateServer {
        public static void main(String[] args) {
            try {
                ServerSocket sock = new ServerSocket(6013);

                /* Listen for connections */
                while(true) {
                    Socket client = sock.accept();
                    PrintWriter pout = new PrintWriter(client.getOutputStream(), true);
                    pout.println(new java.util.Date().toString());
                    client.close();
                }
            } catch (IOException ioe) {
                System.err.println(ioe);
            }
        }
    }